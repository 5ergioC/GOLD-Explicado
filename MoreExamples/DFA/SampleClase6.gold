using gold.structures.automaton.*
using gold.visualization.automaton.*

// Este autómata acepta cadenas sobre el alfabeto a b
// Ejemplos de cadenas aceptadas: "ab" 
// Ejemplos de cadenas rechazadas: Cualquier palabra que no sea ab

// Automata que acepta AB exactamente, ni una mas ni una menos

procedure main(args:String[]) begin
    GAutomataFrame.show(createAutomaton())
    Utilities.test(createAutomaton())
end

function createAutomaton():IAutomaton begin
    // Definición de estados
    Q:={"q0", "q1", "q2", "t"} // Se le llama T porque es estado basura, trash, donde falla eternamente.
    
    // Definición de alfabeto
    Σ:={'a', 'b'}
    
    // Estado inicial
    q₀:="q0"  // Empezamos asumiendo una cantidad par de 'a's (0 'a's es par)
    
    // Definición de estados finales
    F:={"q2"}  // Queremos aceptar cuando la cantidad de 'a's es impar.
    
    // Función de transiciones
    δ:=⟦⟦"q0", 'a', "q1"⟧,  
        ⟦"q0", 'b', "t"⟧,  
        ⟦"q1", 'a', "t"⟧,  
        ⟦"q1", 'b', "q2"⟧,
		  ⟦"q2", 'b', "t"⟧,
        ⟦"q2", 'a', "t"⟧,
		⟦"t", 'a', "t"⟧,
 		⟦"t", 'b', "t"⟧⟧
        
        
    
    // Creación del autómata determinístico
    return GDeterministicAutomaton(Q,Σ,q₀,F,δ)
end
