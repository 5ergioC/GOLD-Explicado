using gold.structures.automaton.*
using gold.visualization.automaton.*

// Este autómata acepta cadenas sobre el alfabeto a b
// Las cadenas pueden tener cualquier cantidad de 'b', ya que no afecta el conteo de 'a'.
// Ejemplos de cadenas aceptadas: ""
// Ejemplos de cadenas rechazadas: Cualquier palabra 

// Automata que acepta AB exactamente, ni una mas ni una menos

procedure main(args:String[]) begin
    GAutomataFrame.show(createAutomaton())
    Utilities.test(createAutomaton())
end

function createAutomaton():IAutomaton begin
    // Definición de estados
    Q:={"q0", "q1", "q2", "t"} // Se le llama T porque es estado basura, trash, donde falla eternamente.
    
    // Definición de alfabeto
    Σ:={'a', 'b'}
    
    // Estado inicial
    q₀:="q0"  // Empezamos asumiendo una cantidad par de 'a's (0 'a's es par)
    
    // Definición de estados finales
    F:={"q2"}  // Queremos aceptar cuando la cantidad de 'a's es impar.
    
    // Función de transiciones
    δ:=⟦⟦"q0", 'a', "q1"⟧,  
        ⟦"q0", 'b', "t"⟧,  
        ⟦"q1", 'a', "t"⟧,  
        ⟦"q1", 'b', "q2"⟧,
		  ⟦"q2", 'b', "t"⟧,
        ⟦"q2", 'a', "t"⟧,
		⟦"t", 'a', "t"⟧,
 		⟦"t", 'b', "t"⟧⟧
        
        
    
    // Creación del autómata determinístico
    return GDeterministicAutomaton(Q,Σ,q₀,F,δ)
end

// Ejemplos de cadenas aceptadas:
// "a": Una 'a' lleva de par a impar, lo que es aceptado.
// "ab": Una 'a' lleva a impar, las 'b' no afectan el estado.
// "aba": Las 'a's alternan el estado, terminando en impar.
// "bbabb": Solo la 'a' central afecta, llevando el estado a impar.
// "baaa": Tres 'a's llevan el estado a impar.

// Ejemplos de cadenas rechazadas:
// "": No contiene ninguna 'a', por lo tanto es par.
// "b": Solo contiene 'b', por lo que es par.
// "aa": Dos 'a's llevan el estado de par a impar y luego de vuelta a par.
// "bbaa": Las dos 'a's hacen que el estado final sea par.
// "babbb": Solo hay una 'a', pero termina en par ya que la última transición deja el estado en par.
