// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/A_HasCat_GOLD.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class A_HasCat_GOLD {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=7;
      GAutomataFrame.show($cast(gold.structures.automaton.IAutomaton.class,A_HasCat_GOLD.createAutomaton()));
      $line=9;
      Utilities.test($cast(gold.structures.automaton.IAutomaton.class,A_HasCat_GOLD.createAutomaton()));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,A_HasCat_GOLD.class,"main",$line);
    }
  }
  public static IAutomaton createAutomaton() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=17;
      Object Q=$fix(GCollections.asSet("_cat","c_at","ca_t","cat_"));
      $line=20;
      Object \u03A3=$fix(GCollections.asSet('c','a','t'));
      $line=23;
      Object q_0=$fix("_cat");
      $line=26;
      Object F=$fix(GCollections.asSet("cat_"));
      $line=30;
      Object \u03B4=$fix(new Object[]{new Object[]{"_cat",'c',"c_at"},new Object[]{"_cat",'a',"_cat"},new Object[]{"_cat",'t',"_cat"},new Object[]{"c_at",'c',"c_at"},new Object[]{"c_at",'a',"ca_t"},new Object[]{"c_at",'t',"_cat"},new Object[]{"ca_t",'c',"c_at"},new Object[]{"ca_t",'a',"_cat"},new Object[]{"ca_t",'t',"cat_"},new Object[]{"cat_",'c',"cat_"},new Object[]{"cat_",'a',"cat_"},new Object[]{"cat_",'t',"cat_"}});
      $line=44;
      $result=$invokeConstructor(GDeterministicAutomaton.class,new Object[]{Q,\u03A3,q_0,F,\u03B4});
      if (true) break $try;
      $line=45;
      $rethrow(new RuntimeException("The function \"createAutomaton()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,A_HasCat_GOLD.class,"createAutomaton",$line);
    }
    return $cast(IAutomaton.class,$result);
  }
}
